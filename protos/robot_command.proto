// Copyright 2021, Yang Luo"
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
//
// @Author
// Yang Luo, PHD
// Shenyang Institute of Automation, Chinese Academy of Sciences.
// email: luoyang@sia.cn

syntax = "proto3";

package rocos;

option java_outer_classname = "RobotStateProto";

import "header.proto"; // Standard header of gRPC
import "google/protobuf/wrappers.proto";

enum Synchronization {
    SYNC_NONE = 0;
    SYNC_TIME = 1;
    SYNC_PHASE = 2;
}

enum Mode {
    MODE_CSP = 0;
    MODE_CSV = 1;
    MODE_CST = 2;
}

/////// SingleAxisCommand ////////////
message SingleAxisEnabled {
    int32 id = 1;
}

message SingleAxisDisabled {
    int32 id = 1;
}

message SingleAxisMode {
    int32 id = 1;
    Mode mode = 2;
}

message SingleAxisMove {
    int32 id = 1;
    double pos = 2;
    optional double max_vel = 3;
    optional double max_acc = 4;
    optional double max_jerk = 5;
    optional double least_time = 6;
}

message SingleAxisCommand {
    oneof command {
        SingleAxisEnabled enabled = 1;
        SingleAxisDisabled disabled = 2;
        SingleAxisMode mode = 3;
        SingleAxisMove move = 4;
    }
}

/////// MultiAxisCommand ////////////
message MultiAxisEnabled {
}

message MultiAxisDisabled {
}

message MultiAxisMode {
    Mode mode = 1;
}

message MultiAxisMove {
    repeated double target_pos = 1;
    repeated double target_vel = 2;
    Synchronization synchronization = 3;
}

message MultiAxisCommand {
    oneof command {
        MultiAxisEnabled enabled = 1;
        MultiAxisDisabled disabled = 2;
        MultiAxisMode mode = 3;
        MultiAxisMove move = 4;
    }
}


/////// General Command /////////////
message Enabled {
    repeated double target_pos = 1;
    repeated double target_vel = 2;
}

message Disabled {

}

message MoveJ {
    repeated double target_pos = 1;
    repeated double target_vel = 2;
    Synchronization synchronization = 3;
}



///////////////////////////////////////

message RobotCommand {
    oneof command {
        Enabled enabled = 1;
        Disabled disabled = 2;
        MoveJ   move_j = 3;
        SingleAxisCommand single_axis_command = 4;
        MultiAxisCommand multi_axis_command = 5;
    }
}

message RobotCommandRequest {
    //Common request header.
    RequestHeader header = 1;
    RobotCommand command = 2;
}

message RobotCommandResponse {
    //Common request header.
    ResponseHeader header = 1;
}