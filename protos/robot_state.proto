// Copyright 2021, Yang Luo"
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
//
// @Author
// Yang Luo, PHD
// Shenyang Institute of Automation, Chinese Academy of Sciences.
// email: luoyang@sia.cn

syntax = "proto3";

package rocos;

option java_outer_classname = "RobotStateProto";

import "header.proto"; // Standard header of gRPC
import "geometry.proto";
import "google/protobuf/wrappers.proto";
import "google/protobuf/timestamp.proto";

// Proto containing the state of a joint on the robot. This can be used with the robot skeleton to
// update the current view of the robot.
message JointState {
    // This name maps directly to the joints in the URDF.
    string name = 1;
    // This is typically an angle in radians as joints are typically revolute. However, for
    // translational joints this could be a distance in meters.
    double position = 2;
    // The joint velocity in [m/s].
    double velocity = 3;
    // The joint acceleration in [m/s^2].
    double acceleration = 4;

    // This is typically a torque in Newton meters as joints are typically revolute. However, for
    // translational joints this could be a force in Newtons.
    double load = 5;

    enum Status {
        STATUS_UNSPECIFIED = 0;
        STATUS_DISABLED = 1;
        STATUS_ENABLED  = 2;
        STATUS_FAULT = 3;
    }
    // The joint status
    Status status = 6;

    bool raw_data = 7;
}

message FlangeState {
    SE3Pose pose = 1;
}

message ToolState {
    SE3Pose pose = 1;
}

message BaseState {
    SE3Pose pose = 1;
}

// The current state of the robot.
message RobotState {
    // Joint state
    repeated JointState joint_states = 1;
    // Hardware state
    HardwareState hw_state = 2;
    // Flange state
    FlangeState flange_state = 3;
    // Tool state
    ToolState   tool_state = 4;
    // Base state
    BaseState   base_state = 5;
}

message HardwareState {
    enum HardwareType {
        HW_TYPE_UNKNOWN = 0;
        HW_TYPE_SIM = 1;
        HW_TYPE_ETHERCAT = 2;
        HW_TYPE_CAN = 3;      // reserved
        HW_TYPE_PROFINET =4;  // reserved
    }
    HardwareType hw_type = 1;

    google.protobuf.Timestamp timestamp = 2;

    double min_cycle_time = 3;
    double max_cycle_time = 4;
    double current_cycle_time = 5;

    int32 slave_num = 6;

}

message RobotStateRequest {
    //Common request header.
    RequestHeader header = 1;
    optional bool raw_data = 2; // 是否返回原始数据
}

message RobotStateResponse {
    //Common request header.
    ResponseHeader header = 1;
    RobotState robot_state = 2;
}